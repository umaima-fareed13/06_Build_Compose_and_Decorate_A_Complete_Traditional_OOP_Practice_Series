# ---------------------- Assignment 1: Using self ----------------------

class Student:
    def __init__(self, name, marks):
        self.name = name
        self.marks = marks

    def display(self):
        print(f"Name: {self.name}, Marks: {self.marks}")

# Example:
s1 = Student("Ali", 85)
s1.display()


# ---------------------- Assignment 2: Using cls ----------------------

class Counter:
    count = 0

    def __init__(self):
        Counter.count += 1

    @classmethod
    def display_count(cls):
        print(f"Total objects created: {cls.count}")

# Example:
c1 = Counter()
c2 = Counter()
Counter.display_count()


# ---------------------- Assignment 3: Public Variables and Methods ----------------------

class Car:
    def __init__(self, brand):
        self.brand = brand

    def start(self):
        print(f"{self.brand} car is starting...")

# Example:
car1 = Car("Toyota")
print(car1.brand)
car1.start()


# ---------------------- Assignment 4: Class Variables and Class Methods ----------------------

class Bank:
    bank_name = "National Bank"

    @classmethod
    def change_bank_name(cls, name):
        cls.bank_name = name

    def display_bank(self):
        print(f"Bank: {Bank.bank_name}")

# Example:
b1 = Bank()
b2 = Bank()
b1.display_bank()
Bank.change_bank_name("State Bank")
b2.display_bank()


# ---------------------- Assignment 5: Static Variables and Static Methods ----------------------

class MathUtils:
    @staticmethod
    def add(a, b):
        return a + b

# Example:
print(MathUtils.add(5, 3))


# ---------------------- Assignment 6: Constructors and Destructors ----------------------

class Logger:
    def __init__(self):
        print("Logger object created!")

    def __del__(self):
        print("Logger object destroyed!")

# Example:
logger = Logger()
del logger


# ---------------------- Assignment 7: Access Modifiers ----------------------

class Employee:
    def __init__(self, name, salary, ssn):
        self.name = name            # Public
        self._salary = salary       # Protected
        self.__ssn = ssn            # Private

emp = Employee("Sara", 50000, "123-45-6789")
print(emp.name)           # Works (public)
print(emp._salary)        # Works (conventionally protected, but accessible)
# print(emp.__ssn)        # Error: private attribute
print(emp._Employee__ssn) # Works using name mangling

# ---------------------- Assignment 8: The super() Function ----------------------

class Person:
    def __init__(self, name):
        self.name = name

class Teacher(Person):
    def __init__(self, name, subject):
        super().__init__(name)
        self.subject = subject

# Example:
t = Teacher("Ali", "Math")
print(f"{t.name} teaches {t.subject}")


# ---------------------- Assignment 9: Abstract Classes and Methods ----------------------

from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

class Rectangle(Shape):
    def __init__(self, w, h):
        self.width = w
        self.height = h

    def area(self):
        return self.width * self.height

# Example:
r = Rectangle(4, 5)
print("Area:", r.area())


# ---------------------- Assignment 10: Instance Methods ----------------------

class Dog:
    def __init__(self, name, breed):
        self.name = name
        self.breed = breed

    def bark(self):
        print(f"{self.name} says woof!")

# Example:
dog = Dog("Buddy", "Labrador")
dog.bark()


# ---------------------- Assignment 11: Class Methods ----------------------

class Book:
    total_books = 0

    @classmethod
    def increment_book_count(cls):
        cls.total_books += 1

# Example:
Book.increment_book_count()
Book.increment_book_count()
print("Total Books:", Book.total_books)


# ---------------------- Assignment 12: Static Methods ----------------------

class TemperatureConverter:
    @staticmethod
    def celsius_to_fahrenheit(c):
        return (c * 9/5) + 32

# Example:
print(TemperatureConverter.celsius_to_fahrenheit(25))


# ---------------------- Assignment 13: Composition ----------------------

class Engine:
    def start(self):
        print("Engine started")

class Car:
    def __init__(self, engine):
        self.engine = engine

    def start(self):
        self.engine.start()

# Example:
eng = Engine()
my_car = Car(eng)
my_car.start()


# ---------------------- Assignment 14: Aggregation ----------------------

class Department:
    def __init__(self, name, employee):
        self.name = name
        self.employee = employee

class Employee:
    def __init__(self, name):
        self.name = name

# Example:
emp = Employee("John")
dept = Department("IT", emp)
print(dept.employee.name)


# ---------------------- Assignment 15: MRO and Diamond Inheritance ----------------------

class A:
    def show(self):
        print("A.show")

class B(A):
    def show(self):
        print("B.show")

class C(A):
    def show(self):
        print("C.show")

class D(B, C):
    pass

# Example:
d = D()
d.show()  # Follows MRO: D -> B -> C -> A


# ---------------------- Assignment 16: Function Decorators ----------------------

def log_function_call(func):
    def wrapper():
        print("Function is being called")
        func()
    return wrapper

@log_function_call
def say_hello():
    print("Hello!")

say_hello()


# ---------------------- Assignment 17: Class Decorators ----------------------

def add_greeting(cls):
    class NewClass(cls):
        def greet(self):
            return "Hello from Decorator!"
    return NewClass

@add_greeting
class Person:
    def __init__(self, name):
        self.name = name

# Example:
p = Person("Ali")
print(p.greet())


# ---------------------- Assignment 18: Property Decorators ----------------------

class Product:
    def __init__(self, price):
        self._price = price

    @property
    def price(self):
        return self._price

    @price.setter
    def price(self, value):
        self._price = value

    @price.deleter
    def price(self):
        del self._price

# Example:
item = Product(100)
print(item.price)
item.price = 150
print(item.price)
del item.price


# ---------------------- Assignment 19: callable() and __call__() ----------------------

class Multiplier:
    def __init__(self, factor):
        self.factor = factor

    def __call__(self, value):
        return self.factor * value

# Example:
m = Multiplier(3)
print(callable(m))        # True
print(m(10))              # 30


# ---------------------- Assignment 20: Custom Exception ----------------------

class InvalidAgeError(Exception):
    pass

def check_age(age):
    if age < 18:
        raise InvalidAgeError("Age must be at least 18.")

try:
    check_age(16)
except InvalidAgeError as e:
    print("Caught Exception:", e)


# ---------------------- Assignment 21: Custom Iterable ----------------------

class Countdown:
    def __init__(self, start):
        self.start = start

    def __iter__(self):
        self.n = self.start
        return self

    def __next__(self):
        if self.n < 0:
            raise StopIteration
        current = self.n
        self.n -= 1
        return current

# Example:
for number in Countdown(5):
    print(number)
